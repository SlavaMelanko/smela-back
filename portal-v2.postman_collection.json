{
	"info": {
		"_postman_id": "783343ab-6b4e-43e5-b153-7009361255c0",
		"name": "portal-v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3880760"
	},
	"item": [
		{
			"name": "signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = pm.response.json();",
							"// Save the token as an environment variable",
							"pm.environment.set(\"access_token\", responseData.token);",
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"",
							"pm.test(\"Validate the user object schema\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.exist.and.to.be.an('object');",
							"",
							"    pm.expect(responseData.user).to.have.all.keys('id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt', 'updatedAt');",
							"",
							"    pm.expect(responseData.user.id).to.be.a('number');",
							"    pm.expect(responseData.user.firstName).to.be.a('string');",
							"    pm.expect(responseData.user.lastName).to.be.a('string');",
							"    pm.expect(responseData.user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
							"    pm.expect(responseData.user.role).to.be.a('string');",
							"    pm.expect(responseData.user.status).to.be.a('string');",
							"    pm.expect(responseData.user.createdAt).to.be.a('string');",
							"    pm.expect(responseData.user.updatedAt).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.user.email).to.exist.and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
							"});",
							"",
							"",
							"pm.test(\"CreatedAt and UpdatedAt are in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.have.all.keys('id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt', 'updatedAt');",
							"",
							"    // Check if createdAt and updatedAt are valid date formats",
							"    const isValidDate = (dateString) => {",
							"        const date = new Date(dateString);",
							"        return !isNaN(date.getTime());",
							"    };",
							"",
							"    pm.expect(isValidDate(responseData.user.createdAt)).to.be.true;",
							"    pm.expect(isValidDate(responseData.user.updatedAt)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Slava\",\n    \"lastName\": \"Melanko\",\n    \"email\": \"slava.melanko+42@gmail.com\",\n    \"password\": \"P@ssw0rd!\",\n    \"role\": \"user\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth_api_url}}/signup",
					"host": [
						"{{auth_api_url}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "resend-verification-email",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"slava.melanko+42@gmail.com\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth_api_url}}/resend-verification-email",
					"host": [
						"{{auth_api_url}}"
					],
					"path": [
						"resend-verification-email"
					]
				}
			},
			"response": []
		},
		{
			"name": "verify-email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = pm.response.json();",
							"// Save the token as an environment variable",
							"pm.environment.set(\"access_token\", responseData.token);",
							"",
							"// Existing tests",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Validate the user object schema\", function () {",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('user').that.is.an('object');",
							"    pm.expect(responseData.user).to.have.all.keys('id', 'firstName', 'lastName', 'email', 'role', 'status', 'createdAt', 'updatedAt');",
							"",
							"    pm.expect(responseData.user.id).to.be.a('number');",
							"    pm.expect(responseData.user.firstName).to.be.a('string');",
							"    pm.expect(responseData.user.lastName).to.be.a('string');",
							"    pm.expect(responseData.user.email).to.be.a('string').that.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
							"    pm.expect(responseData.user.role).to.be.a('string');",
							"    pm.expect(responseData.user.status).to.be.a('string');",
							"    pm.expect(responseData.user.createdAt).to.be.a('string');",
							"    pm.expect(responseData.user.updatedAt).to.be.a('string');",
							"",
							"    pm.expect(responseData).to.have.property('token').that.is.a('string');",
							"});",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    pm.expect(responseData.user).to.have.property('email').that.is.a('string').and.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
							"});",
							"",
							"pm.test(\"The token must be a non-empty string\", function () {",
							"    pm.expect(responseData).to.have.property('token').that.is.a('string').and.is.not.empty;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"token\": \"5971bb6e0e9760d990b4462e08e1af981a449116f6acb61dc76cd1ab27e03747\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth_api_url}}/verify-email",
					"host": [
						"{{auth_api_url}}"
					],
					"path": [
						"verify-email"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json()",
							"",
							"if (response.token) {",
							"  pm.environment.set('access_token', response.token)",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"slava.melanko+42@gmail.com\",\n    \"password\": \"P@ssw0rd!!\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth_api_url}}/login",
					"host": [
						"{{auth_api_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "me",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protected_api_url}}/me",
					"host": [
						"{{protected_api_url}}"
					],
					"path": [
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "me",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"lastName\": \"Melankoo\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protected_api_url}}/me",
					"host": [
						"{{protected_api_url}}"
					],
					"path": [
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "request-password-reset",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"slava.melanko+42@gmail.com\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth_api_url}}/request-password-reset",
					"host": [
						"{{auth_api_url}}"
					],
					"path": [
						"request-password-reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "reset-password",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"token\": \"5a7364840b53dac1bc25ce7b7164aa2366e87c9d17dbc5e3e90470cc7281d62f\",\n    \"password\": \"P@ssw0rd!!\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth_api_url}}/reset-password",
					"host": [
						"{{auth_api_url}}"
					],
					"path": [
						"reset-password"
					]
				}
			},
			"response": []
		},
		{
			"name": "logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set('access_token', '')"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{auth_api_url}}/logout",
					"host": [
						"{{auth_api_url}}"
					],
					"path": [
						"logout"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}